## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Management'
description: 'APIs for managing users'
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'List of users'
      description: 'Retrieve a paginated, filtered list of users.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      keyword:
        name: keyword
        description: ''
        required: false
        example: architecto
        type: 'Filter by keyword.'
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      email:
        name: email
        description: ''
        required: false
        example: gbailey@example.net
        type: 'Filter by email.'
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      name:
        name: name
        description: ''
        required: false
        example: architecto
        type: 'Filter by name.'
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      samaccountname:
        name: samaccountname
        description: ''
        required: false
        example: architecto
        type: 'Filter by samaccountname.'
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanQueryParameters:
      keyword: architecto
      email: gbailey@example.net
      name: architecto
      samaccountname: architecto
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":"01JXNET9ZJZWDEYTJB3BK9E1VZ","name":"Mr. Gerhard Dach Jr.","email":"lafayette.considine@example.com","samaccountname":"zbailey","company":"Breitenberg Inc","title":"Gaming Cage Worker","manager":"Rogers Leuschke PhD","status":{"id":1,"name":"active"}},{"id":"01JXNET9ZMAG3DBXARARY3E9RH","name":"Annette Labadie","email":"kconsidine@example.net","samaccountname":"tleuschke","company":"Nitzsche-Ankunding","title":"Biochemist or Biophysicist","manager":"Ms. Shaina Balistreri","status":{"id":1,"name":"active"}}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"\/?page=1","label":"1","active":true},{"url":null,"label":"Next &raquo;","active":false}],"path":"\/","per_page":10,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users/init-data
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Initial user form'
      description: 'Fetch initial data (statuses, permissions, modules) for user form setup.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "statuses": [
                  {
                      "id": 1,
                      "name": "active"
                  },
                  {
                      "id": 2,
                      "name": "new"
                  },
                  {
                      "id": 5,
                      "name": "inactive"
                  }
              ],
              "permissions": {
                  "*": ["*:*"],
                  "aarm": [
                      "aarm:*",
                      "aarm:create",
                      "aarm:delete",
                      "aarm:edit",
                      "aarm:view"
                  ],
                  "apcw": [
                      "apcw:*",
                      "apcw:create",
                      "apcw:delete",
                      "apcw:edit",
                      "apcw:view"
                  ],
                  "feature": [
                      "feature:*",
                      "feature:create",
                      "feature:delete",
                      "feature:edit",
                      "feature:view"
                  ],
                  "mail": [
                      "mail:*",
                      "mail:create",
                      "mail:delete",
                      "mail:edit",
                      "mail:receive",
                      "mail:send",
                      "mail:view"
                  ],
                  "module": [
                      "module:*",
                      "module:create",
                      "module:delete",
                      "module:edit",
                      "module:view"
                  ],
                  "notification": [
                      "notification:*",
                      "notification:create",
                      "notification:delete",
                      "notification:edit",
                      "notification:receive",
                      "notification:send",
                      "notification:view"
                  ],
                  "opr": ["opr:*", "opr:create", "opr:delete", "opr:edit", "opr:view"],
                  "process": [
                      "process:*",
                      "process:create",
                      "process:delete",
                      "process:edit",
                      "process:view"
                  ],
                  "report": [
                      "report:*",
                      "report:create",
                      "report:delete",
                      "report:edit",
                      "report:view"
                  ],
                  "ssh": ["ssh:*", "ssh:create", "ssh:delete", "ssh:edit", "ssh:view"],
                  "subprocess": [
                      "subprocess:*",
                      "subprocess:create",
                      "subprocess:delete",
                      "subprocess:edit",
                      "subprocess:view"
                  ],
                  "task": [
                      "task:*",
                      "task:create",
                      "task:delete",
                      "task:edit",
                      "task:view"
                  ],
                  "template": [
                      "template:*",
                      "template:create",
                      "template:delete",
                      "template:edit",
                      "template:view"
                  ],
                  "user": [
                      "user:*",
                      "user:create",
                      "user:delete",
                      "user:edit",
                      "user:view"
                  ]
              },
              "modules": ["aarm", "apcw", "opr", "ssh"]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new user'
      description: 'Validate and create a new user record.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      samaccountname:
        name: samaccountname
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs:
        name: configs
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs.permissions:
        name: configs.permissions
        description: ''
        required: false
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs.modules:
        name: configs.modules
        description: 'The <code>code</code> of an existing record in the modules table.'
        required: false
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      samaccountname: architecto
      configs:
        permissions:
          - architecto
        modules:
          - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":"01JXNETA085KQTXS2GSQB4JMAG","samaccountname":"rempel.chadrick","name":"Jermaine Tillman","email":"mya96@example.com","title":"Patrol Officer","company":"Cruickshank Inc"}'
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"message": "Bad Request."}'
        headers: []
        description: 'Bad Request'
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "fieldName": ["error-message."],
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete set of users'
      description: 'Delete one or more users by their IDs.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      ids:
        name: ids
        description: 'The <code>id</code> of an existing record in the users table.'
        required: true
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      ids:
        - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "status": "success",
              "message": "Done"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "fieldName": ["error-message."],
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: api/users/change-status
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Status for set of users'
      description: 'Change the status of one or more user instantly.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      ids:
        name: ids
        description: 'The <code>id</code> of an existing record in the users table.'
        required: true
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: ''
        required: true
        example: '5'
        type: string
        enumValues:
          - '1'
          - '2'
          - '5'
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      ids:
        - architecto
      status: '5'
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "status": "success",
              "message": "Done"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "fieldName": ["error-message."],
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Fetch user details'
      description: 'Retrieve detailed information for a single user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 01jxncagj1vepz5d4qrykeghfs
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 01jxncagj1vepz5d4qrykeghfs
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":"01JXNETA11T683NN6P24NRHQRA","samaccountname":"emelie.baumbach","name":"Ferne Fritsch","email":"isidro.mclaughlin@example.org","title":"Claims Examiner","company":"Stokes and Sons","division":"facere","memberof":"tempora,ex,voluptatem","department":"laboriosam","manager":"Sebastian Haag I","manager_email":"daphne59@nitzsche.net","lead":"Hank Batz","lead_email":"kutch.cynthia@fahey.com","status":{"id":1,"name":"active"},"created_at":"2025-06-13T20:13:36.673000Z","updated_at":"2025-06-13T20:13:36.673000Z","created_by":null,"created_by_email":null,"updated_by":null,"updated_by_email":null,"configs":null,"metas":null}'
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: 'APIs for managing users'
      subgroup: ''
      subgroupDescription: ''
      title: 'Update existing user'
      description: 'Validate and update an existing user’s information.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      Content-Type: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 01jxncagj1vepz5d4qrykeghfs
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 01jxncagj1vepz5d4qrykeghfs
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      samaccountname:
        name: samaccountname
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs:
        name: configs
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs.permissions:
        name: configs.permissions
        description: ''
        required: false
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      configs.modules:
        name: configs.modules
        description: 'The <code>code</code> of an existing record in the modules table.'
        required: false
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      samaccountname: architecto
      configs:
        permissions:
          - architecto
        modules:
          - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":"01JXNETA1CHZKP7P1M2V6X5348","samaccountname":"jdach","name":"Vesta Schuster PhD","email":"breitenberg.gilbert@example.com","title":"Electric Meter Installer","company":"Hirthe Inc"}'
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: Forbidden
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "fieldName": ["error-message."],
            }
          }
        headers: []
        description: 'Validation Error'
        custom: []
      -
        status: 500
        content: '{"message": "Server error."}'
        headers: []
        description: 'Internal Server Error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
